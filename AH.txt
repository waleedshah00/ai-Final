#va
#adjlist version A
def dfs(adj_list, start):
    visited = set()
    stack = [start]

    while stack:
        node = stack.pop()
        if node not in visited:
            print(node, end=" ")
            visited.add(node)
        
            stack.extend(reversed(adj_list[node]))

adj_list = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': [],
    'F': ['G', 'H'],
    'G': [],
    'H': []
}

dfs(adj_list, 'A')

###################

def minimax(node, depth, is_maximizing_player):
    
    if depth == 0 or not isinstance(node, list):
        return node
    
    if is_maximizing_player:
        max_eval = float('-inf')
        for child in node:
            eval = minimax(child, depth - 1, False)
            max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = float('inf')
        for child in node:
            eval = minimax(child, depth - 1, True)
            min_eval = min(min_eval, eval)
        return min_eval

# Example game tree with 7 child-nodes at each parent level
game_tree = [
    [3, 5, 6, 9, 1, 2, 0],  # Depth 1
    [7, 3, 5, 4, 6, 2, 1],  # Depth 1
    [8, 7, 6, 4, 3, 2, 1],  # Depth 1
    [9, 7, 5, 3, 2, 1, 0],  # Depth 1
    [6, 4, 3, 2, 1, 0, -1], # Depth 1
    [5, 3, 2, 1, 0, -1, -2],# Depth 1
    [4, 2, 1, 0, -1, -2, -3]# Depth 1
]

# Run the Minimax algorithm on the game tree
best_score = minimax(game_tree, 2, True)
print("Best score:", best_score)

##############
#Knn
#knn
import numpy as np
from collections import Counter

def manhattan_distance(a, b):
    return np.sum(np.abs(a - b))
#function classify 
def knn_classify(X_train, y_train, X_test, k=3):
    predictions = []
    for test_point in X_test:
        distances = []
        for i, train_point in enumerate(X_train):
            distance = manhattan_distance(test_point, train_point)
            distances.append((distance, y_train[i]))
        
        distances.sort(key=lambda x: x[0])
        nearest_neighbors = distances[:k]  #START TO END K VALUE
        nearest_labels = [label for _, label in nearest_neighbors]
        predicted_label = Counter(nearest_labels).most_common(1)[0][0]
        predictions.append(predicted_label)
    
    return predictions

import pandas as pd
file_path = 'iris.csv'  # Replace with the actual path
iris_data = pd.read_csv(file_path)

# Prepare the data
X_train = iris_data[['sepal.length', 'sepal.width']].values
y_train = iris_data['variety'].values

# Example test set
X_test = np.array([[6.2, 2.9], [5.7, 2.8]])

# Set value of k =3
k = 3

# Get predictions CALL FUNCTION KNN CLASSIFY
predictions = knn_classify(X_train, y_train, X_test, k)
print(f'Predictions: {predictions}')




#################

import random
#ga
pop = ['10101', '11000', '01111', '00010']

def fit(individual):
    return sum(int(bit) for bit in individual)
# Roulette wheel selection
def sel(population, fitnesses):
    total_fitness = sum(fitnesses)
    probs = [f / total_fitness for f in fitnesses]
    return random.choices(population, weights=probs, k=2)
# Single-point crossover
def crossover(p1, p2):
    point = random.randint(1, len(p1) - 1)
    c1 = p1[:point] + p2[point:]
    c2 = p2[:point] + p1[point:]
    return c1, c2
# Bit-flip mutation
def mutation(individual, mutation_rate=0.01):
    mutated = ''.join(
        bit if random.random() > mutation_rate else str(1 - int(bit))
        for bit in individual
    )
    return mutated

def genetic_algorithm(population, mutation_rate=0.01):
    fitnesses = [fit(individual) for individual in population]

    parents = sel(population, fitnesses)
    parent1, parent2 = parents[0], parents[1]

    child1, child2 = crossover(parent1, parent2)

    child1 = mutation(child1, mutation_rate)
    child2 = mutation(child2, mutation_rate)

    return child1, child2

newp = []
for _ in range(len(pop) // 2):
    child1, child2 = genetic_algorithm(pop)
    newp.extend([child1, child2])

print("New Population:", newp)

######################################################################

#vb


#vb
#dfsvist
from collections import deque

def dfs_iterative_deque(graph, start):
    visited = set()
    stack = deque([start])
    
    while stack:
        vertex = stack.pop()
        if vertex not in visited:
            print(vertex, end=' ')
            visited.add(vertex)
            stack.extend(reversed(graph[vertex]))  # Add neighbors to stack in reverse order

# Example usage
graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': [],
    'F': ['G', 'H'],
    'G': [],
    'H': [],
    
}

dfs_iterative_deque(graph, 'A')

###########################################


#tic tac minmax

import math

# Constants
PLAYER = 'X'
OPPONENT = 'O'
EMPTY = ' '

def display(board):
    for row in board:
        print(' | '.join(row))
        print('-' * 5)

def has_moves(board):
    return any(EMPTY in row for row in board)

def get_score(board):
    for row in board:
        if row[0] == row[1] == row[2] and row[0] != EMPTY:
            return 10 if row[0] == PLAYER else -10

    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != EMPTY:
            return 10 if board[0][col] == PLAYER else -10

    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != EMPTY:
        return 10 if board[0][0] == PLAYER else -10

    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != EMPTY:
        return 10 if board[0][2] == PLAYER else -10

    return 0

def minimax(board, depth, is_max):
    score = get_score(board)

    if score in [10, -10]:
        return score

    if not has_moves(board):
        return 0

    if is_max:
        best = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER
                    best = max(best, minimax(board, depth + 1, False))
                    board[i][j] = EMPTY
        return best
    else:
        best = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = OPPONENT
                    best = min(best, minimax(board, depth + 1, True))
                    board[i][j] = EMPTY
        return best

def best_move(board):
    best_val = -math.inf
    move = (-1, -1)
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = PLAYER
                move_val = minimax(board, 0, False)
                board[i][j] = EMPTY
                if move_val > best_val:
                    move = (i, j)
                    best_val = move_val
    return move

# Example usage
board = [
    [PLAYER, OPPONENT, PLAYER],
    [OPPONENT, OPPONENT, PLAYER],
    [EMPTY, EMPTY, EMPTY]
]

print("Current board:")
display(board)

move = best_move(board)
print("The best move is:", move)



###########
#bfs

#bfs

graph = {
'A': ['B','C'],
'B': ['D', 'E'],
'C': ['F'],
'D': [],
'E': ['F'],
'F': []
}

visited = []
queue = []

def BFS(visited, graph, node):
    visited.append(node)
    queue.append(node)
    while queue:
        s = queue.pop(0)
        print (s, end = " ")
        for neighbour in graph[s]:
            if neighbour not in visited:
                visited.append(neighbour)
                queue.append(neighbour)
                
BFS(visited, graph, 'A')

